#include <iostream>using namespace std;//Warping functionsint warp(unsigned char*** dest, unsigned char*** source, double** A_mat, double U[], double V[]);int Image_warp(unsigned char*** dest, unsigned char*** source, double* X, double* Y, double* x1, double* y1);int main(int argc, char *argv[]){	int i,j,k,temp1_int = 0, temp2_int = 0, temp3_int = 0,size1,size2,format;	FILE *file;	float temp1_float = 0.0,temp2_float = 0.0,temp3_float = 0.0;    //image data storage structures	unsigned char ***Imagedata1,***Imagedata2,***Imagedataout1,***Imagedataout2,***Imagedataout3;	    //image size	size1 = 300;	size2 = 350;	//initializing memory	Imagedata1 = new unsigned char** [size2];	Imagedata2 = new unsigned char** [size2];	Imagedataout1 = new unsigned char** [size2];	Imagedataout2 = new unsigned char** [size2];	Imagedataout3 = new unsigned char** [size2];			for(i = 0; i < size2; i++)	{		Imagedata1[i] = new unsigned char* [size1];			Imagedata2[i] = new unsigned char* [size1];			Imagedataout1[i] = new unsigned char* [size1];			Imagedataout2[i] = new unsigned char* [size1];			Imagedataout3[i] = new unsigned char* [size1];			}		for(i = 0; i < size2; i++)	{		for(j = 0; j < size1; j++)		{			Imagedata1[i][j] = new unsigned char [3];				Imagedata2[i][j] = new unsigned char [3];				Imagedataout1[i][j] = new unsigned char [3];				Imagedataout2[i][j] = new unsigned char [3];				Imagedataout3[i][j] = new unsigned char [3];			}	}    //reading images	if (!(file=fopen("young_drew.raw","rb"))) {		cout << "Cannot open file: " <<endl;		exit(1);	}	for(i = 0 ; i < size2; i++)	{		for(j = 0; j < size1; j++)			fread(Imagedata1[i][j], sizeof(unsigned char),3, file);	}	fclose(file);		if (!(file=fopen("old_drew.raw","rb"))) {		cout << "Cannot open file: " <<endl;		exit(1);	}	for(i = 0 ; i < size2; i++)	{		for(j = 0; j < size1; j++)			fread(Imagedata2[i][j], sizeof(unsigned char),3, file);	}	fclose(file);				for(i = 0; i < size2; i++)	{		for(j = 0; j < size1; j++)		{			for(k = 0; k < 3; k++)			{				Imagedataout1[i][j][k] = (unsigned char)0;				Imagedataout2[i][j][k] = (unsigned char)0;			}		}	}    // creating (x,y) points for triangle coordinates for transformation	double xb[28] = {0,399,33,103,131,131,131,164,192,223,252,252,252,285,373,0,64,172,229,340,399,146,260,94,311,0,200,399};	double yb[28] = {0,0,140,167,146,155,181,173,163,170,139,151,177,160,114,200,234,255,252,231,200,308,301,330,330,399,392,399};	double xh[28] = {0,399,27,77,128,128,128,145,199,250,266,266,266,321,369,0,35,167,228,364,399,125,279,66,331,0,200,399};	double yh[28] = {0,0,121,163,157,167,183,180,171,180,160,170,183,164,122,200,208,225,218,209,200,290,288,318,318,399,384,399};	double x1[28] = {0},y1[28] = {0},x_diff[28] = {0},y_diff[28] = {0},x_factor[28] = {0},y_factor[28] = {0};		/*drew co ordinates*/	/*	double xh[16] = {0,150,299,0,73,120,176,224,299,130,164,102,189,0,150,299};	double yh[16] = {0,0,0,175,174,180,180,179,175,246,245,262,269,349,349,349};	double xb[16] = {0,150,299,0,71,123,178,223,299,132,168,110,191,0,150,299};	double yb[16] = {0,0,0,175,175,170,173,172,175,249,247,272,271,349,349,349};	double x1[16] = {0},y1[16] = {0},x_diff[16] = {0},y_diff[16] = {0},x_factor[16] = {0},y_factor[16] = {0};	*/        //sequential warping	for(i = 0; i < 28; i++)	{		x_diff[i] = (xh[i] - xb[i]);		y_diff[i] = (yh[i] - yb[i]);	}	for(i = 0; i < 28; i++)	{		x_factor[i] = (x_diff[i] / (double)10);		y_factor[i] = (y_diff[i] / (double)10);	}		char str1[30],str2[30],str3[30],str4[30];	int i1 = 0,j1 = 0,i2 = 0,j2 = 0;	float alpha = 1;		for(j = 0; j < 39; j++)	{		for(i = 0; i < 28; i++)		{			x1[i] = (xb[i]) + ((double)(1 + j) * x_factor[i]);			y1[i] = (yb[i]) + ((double)(1 + j) * y_factor[i]);		}		cout << j << '\n';						Image_warp(Imagedataout1, Imagedata1, xh, yh, x1, y1);			Image_warp(Imagedataout2, Imagedata2, xb, yb, x1, y1);								for(i1 = 0; i1 < size2; i1++)		{			for(j1 = 0; j1 < size1; j1++)			{				for(k = 0; k < 3; k++)				Imagedataout3[i1][j1][k] = ((1 - alpha) * Imagedataout1[i1][j1][k]) + ((alpha) * Imagedataout2[i1][j1][k]);			}		}	alpha -= 0.025;	        //debug	if(alpha == 0.2)		cout << '\n' << "take this one: "<< j + 1 << '\n';	if(alpha == 0.5)		cout << '\n' << "take this one: "<< j + 1 << '\n';	if(alpha == 0.8)		cout << '\n' << "take this one: "<< j + 1 << '\n';						sprintf(str1,"%d",j + 1);				strcat(str1,".raw");				strcpy(str2,"drew");				strcat(str2,str1);					if (!(file=fopen(str2,"wb"))) {		cout << "Cannot open file: "  << endl;		exit(1);		}		for(i2 = 0 ; i2 < size2; i2++)	{		for(j2 = 0; j2 < size1; j2++)			fwrite(Imagedataout3[i2][j2], sizeof(unsigned char), 3, file);				}		fclose(file);					}    //writing data	if (!(file=fopen("output1.raw","wb"))) {		cout << "Cannot open file: "  << endl;		exit(1);	}	for(i = 0 ; i < size2; i++)	{		for(j = 0; j < size1; j++)			fwrite(Imagedataout1[i][j], sizeof(unsigned char), 3, file);				}		fclose(file);		if (!(file=fopen("output2.raw","wb"))) {		cout << "Cannot open file: "  << endl;		exit(1);	}	for(i = 0 ; i < size2; i++)	{		for(j = 0; j < size1; j++)			fwrite(Imagedataout2[i][j], sizeof(unsigned char), 3, file);				}		fclose(file);	for(i = 0; i < size2; i++)	{		delete [] Imagedata1[i];		delete [] Imagedataout1[i];		delete [] Imagedataout2[i];	}		return(0);}